
#include<stdio.h>
#include<math.h>

int main()//判断100到200之间有多少个素数
{
	int i = 0;
	int count = 0;
	for (i = 100; i <= 200; i++)
	{
		//判断i是否是素数
		//素数的判断规则，只能被1和本身整除的数
		//试除法
		//产生i到i-1试着去除自己本身
		int j = 0;
		for (j = 2; j < i; j++)
		{
			if (i%j == 0)
			{
				break;//out for
			}
		}
		if (j == i)
		{
			count++;
			printf("%d ", i);
		}
	}
	printf("\ncount = %d\n", count);
	return 0;
}



//封装起来的函数




//int is_prime(int n)//我自己参考上次素数的判断来封装的函数
//{
//	int j = 0;
//	for (j = 2; j < n; j++)
//	{
//		if (n%j == 0)
//		{
//			return 0;
//			break;
//		}
//		else//我的问题是这个else太着急了，如果一个数是105用2来除，不能满足就进入else了，应该要用2-n-1来都整除了才对
//		{
//			return 1;
//			break;
//		}
//	}
//}

//int is_prime(int n)//老师封装的函数
//{
//	//2-n-1的范围内
//	int j = 0;
//	for (j = 2; j < n; j++)
//	{
//		if (n%j == 0)
//			return 0;//return 0 的动作能力其实比break的动作要强，所以有了return 0之后就不需要break了
//	}
//	return 1;//可以到这里的情况只有j=n了，说明没有2到n-1的数可以把自己整除了，所以就是素数，返回1
//}

int is_prime(int n)//老师优化的封装函数
{
	//2-n-1的范围内
	int j = 0;
	for (j = 2; j <=sqrt( n); j++)
	{
		if (n%j == 0)
			return 0;//return 0 的动作能力其实比break的动作要强，所以有了return 0之后就不需要break了
	}
	return 1;//可以到这里的情况只有j=n了，说明没有2到n-1的数可以把自己整除了，所以就是素数，返回1
}

int main()
{
	//打印100-200之间的素数
	int i = 0;
	for (i=100; i <= 200; i++)
	{
		if (is_prime(i) == 1)//如果i是素数，那么就返回1
		{
			printf("%d ", i);
		}
	}
	return 0;
}
